/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2012 University of Washington, 2012 INRIA
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

// Allow ns-3 to ping a real host somewhere, using emulation mode and ping
// the simulated node from the host.
//
//   +-------------------------------------+    
//   |                host                 |
//   +-------------------------------------+    
//   |    ns-3 simulation   |              |                       
//   +----------------------+              |    
//   |       ns-3 Node      |              |   
//   |  +----------------+  |              |   
//   |  |    ns-3 TCP    |  |              |   
//   |  +----------------+  |              |   
//   |  |    ns-3 IPv4   |  |              |   
//   |  +----------------+  |              |   
//   |  |   FdNetDevice  |  |              |  
//   |--+----------------+--+    +------+  |
//   |       | TAP  |            | eth0 |  | 
//   |       +------+            +------+  |
//   |       1.2.3.4                 |     |
//   +-------------------------------|-----+ 
//                                   |
//                                   |                             +-------------+
//                                   ------------ (Internet) ----- | Remote host |                            
//                                                                 +-------------+
//
// To use this example:
//  1) ns-3 will create the TAP device for you in the host machine.
//     For this you need to provide the network address to allocate IP addresses
//     for the TAP device and the ns-3 FdNetDevice.
//
//  2) Take into consideration that this experiment requires the host to be able
//     to forward traffic generated by the simulation to the Internet.
//     So for Linux systems, make sure to configure:
//     # echo 1 > /proc/sys/net/ipv4/ip_forward
//
//     Also enable natting so the ICMP replies from the remote host can reach 
//     back the TAP. 
//     - TAP-network-address is the same as 'tapNetwork'
//     - TAP-network-mask is the same as 'tapMask'
//     # iptables -t nat -A POSTROUTING -s <TAP-network-address>/<TAP-network-mask> -j MASQUERADE
//
//  3) Before running the example make sure that the tap creator binary has root suid.
//     If the --enable-sudo option was used to configure ns-3 with waf, then the following
//     step will not be necessary.
//
//     # chown root.root build/src/fd-net-device/ns3-dev-tap-device-creator
//     # sudo chmod 4755 build/src/fd-net-device/ns3-dev-tap-device-creator
//
//  4)  The example can be executed as follows using waf:
//  
//     ./waf --run fd-tap-ping --command-template="%s --tapNetwork=<TAP-network-address> --tapMask=<TAP-network-mask>" 
//

#include "ns3/abort.h"
#include "ns3/core-module.h"
#include "ns3/internet-module.h"
#include "ns3/network-module.h"
#include "ns3/fd-net-device-module.h"
#include "ns3/internet-apps-module.h"
#include "ns3/ipv4-static-routing-helper.h"
#include "ns3/ipv4-list-routing-helper.h"
#include "ns3/csma-module.h"
#include "ns3/wifi-module.h"
#include "ns3/mobility-module.h"

#include <fcntl.h>  /* O_RDWR */
#include <string.h> /* memset(), memcpy() */
#include <stdio.h> /* perror(), printf(), fprintf() */
#include <stdlib.h> /* exit(), malloc(), free() */
#include <sys/ioctl.h> /* ioctl() */

/* includes for struct ifreq, etc */
#include <sys/types.h>
#include <sys/socket.h>
#include <linux/if.h>
#include <linux/if_tun.h>
#include <unistd.h>

int tun_open( const char *dev)
{
 
  struct ifreq ifr;
  int fd, err;
  char *clonedev = "/dev/net/tun";

  /* Arguments taken by the function:
   *
   * char *dev: the name of an interface (or '\0'). MUST have enough
   *   space to hold the interface name if '\0' is passed
   * int flags: interface flags (eg, IFF_TUN etc.)
   */

   /* open the clone device */
   if( (fd = open(clonedev, O_RDWR)) < 0 ) {
     return fd;
   }

   /* preparation of the struct ifr, of type "struct ifreq" */
   memset(&ifr, 0, sizeof(ifr));

   //ifr.ifr_flags = flags;   /* IFF_TUN or IFF_TAP, plus maybe IFF_NO_PI */

   if (*dev) {
     /* if a device name was specified, put it in the structure; otherwise,
      * the kernel will try to allocate the "next" device of the
      * specified type */
     strncpy(ifr.ifr_name, dev, IFNAMSIZ);
     ifr.ifr_flags = IFF_TAP | IFF_NO_PI; /* TAP interface, No packet information */ 
   }

   /* try to create the device */
   if( (err = ioctl(fd, TUNSETIFF, (void *) &ifr)) < 0 ) {
     close(fd);
     perror("ioctl TUNSETIFF");close(fd);exit(1); 
     return err;
   }
  
  std::cout << dev<< ":  FD = "<< fd << std::endl; 

  /* if the operation was successful, write back the name of the
   * interface to the variable "dev", so the caller can know
   * it. Note that the caller MUST reserve space in *dev (see calling
   * code below) */
  //strcpy(dev, ifr.ifr_name);

  /* this is the special file descriptor that the caller will use to talk
   * with the virtual interface */
  return fd; 

}

using namespace ns3;

NS_LOG_COMPONENT_DEFINE ("TAPPingExample");

static void
PingRtt (std::string context, Time rtt)
{
  NS_LOG_UNCOND ("Received Response with RTT = " << rtt);
}

int
main (int argc, char *argv[])
{
  NS_LOG_INFO ("Ping Emulation Example with TAP");

  std::string remote ("11.0.0.2"); 
  std::string mask ("255.0.0.0");
  std::string pi ("no");

  //
  // Allow the user to override any of the defaults at run-time, via
  // command-line arguments
  //
  CommandLine cmd (__FILE__);
  cmd.AddValue ("remote", "Remote IP address (dotted decimal only please)", remote);
  cmd.AddValue ("tapMask", "Network mask for configure the TAP device (dotted decimal only please)", mask);
  cmd.AddValue ("modePi", "If 'yes' a PI header will be added to the traffic traversing the device(flag IFF_NOPI will be unset).", pi);
  cmd.Parse (argc, argv);

  Ipv4Address remoteIp (remote.c_str ());
  Ipv4Mask tapMask (mask.c_str ());

  GlobalValue::Bind ("SimulatorImplementationType", StringValue ("ns3::RealtimeSimulatorImpl"));
  GlobalValue::Bind ("ChecksumEnabled", BooleanValue (true));

  //
  // Create two ghost nodes.  The first will represent the virtual machine host
  // on the left side of the network; and the second will represent the VM on 
  // the right side.
  //
  NodeContainer nodes;
  nodes.Create (2);

  NodeContainer middle;
  middle.Create(1);     // create one node in the middle 

  NodeContainer left_m (nodes.Get(0), middle.Get(0));
  NodeContainer right_m (nodes.Get(1), middle.Get(0));

/** Wifi PHY **/
  /***************************************************************************/
  // create default  wifi  channel 
  YansWifiChannelHelper wifiChannel = YansWifiChannelHelper::Default ();
  YansWifiPhyHelper wifiPhy;
  wifiPhy.SetPcapDataLinkType (WifiPhyHelper::DLT_IEEE802_11_RADIO);  
  wifiPhy.SetChannel (wifiChannel.Create ());

  /** MAC layer **/
   // Add a mac and Set it to adhoc mode
  WifiMacHelper wifiMac;
  wifiMac.SetType ("ns3::AdhocWifiMac");
  
  // wifi helper 
  WifiHelper wifi;
  wifi.SetStandard (WIFI_STANDARD_80211a);
  wifi.SetRemoteStationManager ("ns3::ConstantRateWifiManager", "DataMode",
                                StringValue ("OfdmRate54Mbps"), 
                                "ControlMode", StringValue ("OfdmRate24Mbps"));

  
  // set possition and mobility model 
  Ptr<ListPositionAllocator> positionAllocWifi = CreateObject<ListPositionAllocator> ();
  positionAllocWifi->Add (Vector (0.0, 0.0, 0.0));
  positionAllocWifi->Add (Vector (5, 0, 0));
  positionAllocWifi->Add (Vector (15, 0, 0));
  MobilityHelper mobility;
  mobility.SetPositionAllocator (positionAllocWifi);
  mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
  mobility.Install (left_m.Get (0));
  mobility.Install (left_m.Get (1));
  mobility.Install (nodes.Get(1)); 

  // dev conteiner of wifi devices starting from left
  NetDeviceContainer leftDev = wifi.Install (wifiPhy, wifiMac, left_m);

  CsmaHelper csma;
  csma.SetChannelAttribute ("DataRate", StringValue ("100Mbps"));
  csma.SetChannelAttribute ("Delay", TimeValue (MilliSeconds(1)));
  NetDeviceContainer rightDev = csma.Install (right_m);
  
  //
  // Add a default internet stack to the node (ARP, IPv4, ICMP, UDP and TCP).
  // 
  InternetStackHelper inet; 
  inet.Install (middle);
  inet.Install (nodes); 

  // Assign adress 
  Ipv4AddressHelper ipv4h; 
  ipv4h.SetBase ("15.0.0.0", "255.0.0.0", "0.0.0.1");
  Ipv4InterfaceContainer apIf_wifi = ipv4h.Assign (leftDev.Get(1));
  Ipv4InterfaceContainer leftIf_wifi = ipv4h.Assign (leftDev.Get(0));
  ipv4h.SetBase ("14.0.0.0", "255.0.0.0", "0.0.0.1");
  Ipv4InterfaceContainer apIf_csma = ipv4h.Assign (rightDev.Get(1));
  Ipv4InterfaceContainer rightIf_csma = ipv4h.Assign (rightDev.Get(0));

  Ipv4StaticRoutingHelper ipv4RoutingHelper;

// Adding the network behind the UE to the pgw --> hardcoding the IP address of the UE connected to the external network
  Ptr<Ipv4StaticRouting> apStaticRouting =
      ipv4RoutingHelper.GetStaticRouting (middle.Get(0)->GetObject<Ipv4> ());
  apStaticRouting->AddNetworkRouteTo (Ipv4Address ("11.0.0.0"), Ipv4Mask ("255.0.0.0"),
                                       Ipv4Address ("15.0.0.2"), apIf_wifi.Get(0).second);
  apStaticRouting->AddNetworkRouteTo (Ipv4Address ("13.0.0.0"), Ipv4Mask ("255.0.0.0"),
                                       Ipv4Address ("14.0.0.2"), apIf_csma.Get(0).second);

  // Create an fd device, set a MAC address and point the device to the
  // Linux device name. 

  FdNetDeviceHelper fdNet;
  NetDeviceContainer tapDevs = fdNet.Install (nodes);

  // get file descriptor from tap device 
  // char *dev = {"tap-left"};
  // int fd = tun_open (dev);
  // if (fd < 0)
  //   {
  //     std::cout << "error open tap dev :: FD " << fd << std::endl;
  //   }
  // std::cout << "FD = "<< fd <<std::endl; 
 
  Ptr<NetDevice> d1 = tapDevs.Get (0);
  Ptr<FdNetDevice> leftFdDevice = d1->GetObject<FdNetDevice> ();
  leftFdDevice->SetFileDescriptor (tun_open("tap-left"));

  Ptr<NetDevice> d2 = tapDevs.Get (1);
  Ptr<FdNetDevice> rightFdDevice = d2->GetObject<FdNetDevice> ();
  rightFdDevice->SetFileDescriptor (tun_open("tap-right"));

  //
  // Add an address to the ns-3 device in the same network than one
  // assigned to the TAP.
  Ptr<Ipv4> ipv4 = nodes.Get(0)->GetObject<Ipv4> ();
  uint32_t interface = ipv4->AddInterface (leftFdDevice);
  Ipv4InterfaceAddress address = Ipv4InterfaceAddress (Ipv4Address ("11.0.0.1"), tapMask);
  std::cout<<"Adress 1: " << address << std::endl; 
  ipv4->AddAddress (interface, address);
  // ipv4->SetMetric (interface, 1);
  ipv4->SetUp (interface);
  
  // Add a route to the ns-3 device so it can reach the outside world though the
  // TAP.
  // std::cout <<  << std::endl; 
  
  Ptr<Ipv4StaticRouting> leftStaticRouting = ipv4RoutingHelper.GetStaticRouting (ipv4);
  leftStaticRouting->SetDefaultRoute (Ipv4Address ("15.0.0.1"), leftIf_wifi.Get(0).second);
  

  ipv4 = nodes.Get(1)->GetObject<Ipv4> ();
  interface = ipv4->AddInterface (rightFdDevice);
  address = Ipv4InterfaceAddress (Ipv4Address ("13.0.0.1"), tapMask);
  std::cout<<"Adress 2: " << address << std::endl; 
  ipv4->AddAddress (interface, address);
  // ipv4->SetMetric (interface, 1);
  ipv4->SetUp (interface);
  
  Ptr<Ipv4StaticRouting> rightStaticRouting = ipv4RoutingHelper.GetStaticRouting (ipv4);
  rightStaticRouting->SetDefaultRoute (Ipv4Address ("14.0.0.1"), rightIf_csma.Get(0).second);
  
  //
  // Create the ping application.  This application knows how to send
  // ICMP echo requests.  Setting up the packet sink manually is a bit
  // of a hassle and since there is no law that says we cannot mix the
  // helper API with the low level API, let's just use the helper.
  //
  NS_LOG_INFO ("Create V4Ping Appliation");
  Ptr<V4Ping> app = CreateObject<V4Ping> ();
  app->SetAttribute ("Remote", Ipv4AddressValue (remoteIp));
  app->SetAttribute ("Verbose", BooleanValue (true) );
  nodes.Get(0)->AddApplication (app);
  app->SetStartTime (Seconds (1.0));
  app->SetStopTime (Seconds (21.0));
  
  //
  // Give the application a name.  This makes life much easier when constructing
  // config paths.
  //
  Names::Add ("app", app);

  //
  // Hook a trace to print something when the response comes back.
  //
  Config::Connect ("/Names/app/Rtt", MakeCallback (&PingRtt));

  wifiPhy.EnablePcapAll ("mp-wifi-lte", true);


  //
  // Now, do the actual emulation.
  //
  NS_LOG_INFO ("Run Emulation.");
  Simulator::Stop (Seconds (65.0));
  Simulator::Run ();
  Simulator::Destroy ();
  NS_LOG_INFO ("Done.");
}

